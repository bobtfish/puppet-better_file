# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----

# ---- original file header ----
#
# @summary
#       A better_file function, which understands puppet:///modules/xxx/foo uris as well as full pathnames
#
#
#
Puppet::Functions.create_function(:'better_file') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    

    unless args.length == 1 then
      raise Puppet::ParseError, ("better_file(): wrong number of arguments (#{args.length}; must be 1)")
    end
    arg = args[0]
    unless arg.respond_to?('to_s') then
      raise Puppet::ParseError, ("#{arg.inspect} is not a string. It looks to be a #{arg.class}")
    end
    arg = arg.to_s
    fn = arg
    if arg =~ /^puppet:\/\/\/modules\/([^\/]+)\/(.*)$/
      mod = $1
      file   = $2
      if module_path = Puppet::Module.find(mod, compiler.environment.to_s)
        module_path = module_path.path
      else
        raise(Puppet::ParseError, "Could not find module #{mod} in environment #{compiler.environment}")
      end
      fn = "#{module_path}/files/#{file}"
    elsif arg =~ /^puppet:\/\/\/files\/(.*)$/
      fn = "#{lookupvar('::settings::confdir')}/files/#{$1}"
    end
    if !File.exists? fn
      raise Puppet::ParseError, ("better_file('#{arg}') could not find file '#{fn}'")
    end
    IO.read(fn)
  
  end
end
